buildscript {
	repositories {
		jcenter()
	}
	dependencies {
	    classpath "io.spring.gradle:dependency-management-plugin:${dependencyPluginVersion}"
            classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
	}
}

apply plugin: 'groovy'
apply plugin: "io.spring.dependency-management"
apply plugin: 'org.springframework.boot'

dependencyManagement {
    imports {
        mavenBom "io.spring.platform:platform-bom:${ioPlatformVersion}"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileGroovy {
    groovyOptions.configurationScript = file( "$rootDir/gradle/groovyCompilerConfiguration.groovy" )
}

compileGroovy.groovyOptions.optimizationOptions['indy'] = true
compileTestGroovy.groovyOptions.optimizationOptions['indy'] = true

class ProjectVersion {
    Integer major
    Integer minor
    Integer patch
    String  branch

    ProjectVersion( Integer major, Integer minor, Integer patch, String branch ) {
        this.major = major
        this.minor = minor
        this.patch = patch
        this.branch = branch
    }

    @Override
    String toString() {
        String release = '-SNAPSHOT'
        if ( branch == 'master' ) {
            release = 'RELEASE'
        }
        else if ( branch == 'development' ) {
            release = 'MILESTONE'
        }
        "${major}.${minor}.${patch}.${release}"
    }
}

version = new ProjectVersion( major.toInteger(), minor.toInteger(), patch.toInteger(), branch.toString() )

repositories {
	jcenter()
}

defaultTasks = ['clean','build']

dependencies {
  compile 'org.codehaus.groovy:groovy-all::indy'
  compile('org.springframework.boot:spring-boot-starter-data-mongodb')
  testCompile('org.springframework.boot:spring-boot-starter-test')
}
